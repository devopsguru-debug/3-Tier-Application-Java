pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        RECIPIENTS= 'sahil.pujara@bonamisoftware.com' 
    }
    stages{
        stage('Git Checkout') {
            steps {
                git url:'https://github.com/devopsguru-debug/3-Tier-Application-Java.git', branch:'main'
            }
        }
        stage('Compile'){
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        stage('Trivy Scan File System') {
            steps {
                sh "trivy fs --format table -o trivy-report.html ."
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar')       //derived from sonar server descrived in manage jenkins
                sh '''
                $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission-Project -Dsonar.projectName=Mission-Project \
                -Dsonar.java.binaries=. 
                '''
            }
        }
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        stage('Deploy Artifacts to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven', jdk: 'jdk17', maven:'maven3', mavenSettingsConfig: '', traceability: true) {
                sh "mvn deploy -DskipTests=true"
                }
            }
        }
        stage('Build & Deploy Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t sahilbonami/mission:latest ."
                    }
                }
            }
        }
        stage('Trivy Scan Docker Image') {
            steps {
                sh "trivy image --format table -o trivy-report.html sahilbonami/mission:latest"
            }
        }
        stage('Push Docker Image') { 
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                sh "docker push sahilbonami/mission:latest"
                sleep 60
                    }
                }
            
            }
        }
        stage('Deploy to K8s') { 
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'mission-eks', contextName: '', credentialsId: 'k8-token', namespace: 'web-app', restrictKubeConfigAccess: false, serverUrl: '<copy endpoint from aws>') {
                    sh "kubectl apply -f deployments.yaml -n web-app"
                }
            }
        }
        stage('Verify K8s Deployment') { 
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'mission-eks', contextName: '', credentialsId: 'k8-token', namespace: 'web-app', restrictKubeConfigAccess: false, serverUrl: '<copy endpoint from aws>') {
                    sh "kubectl get pods -n web-app"
                    sh "kubectl get svc -n web-app"
                }
            }
        }
        stage('Email Notification') {
            steps {
                script { 
                if (currentBuild.result == 'SUCCESS') {
                        emailext (
                            subject: "Build ${currentBuild.fullDisplayName} - SUCCESS",
                            body: '''<h3>Build ${currentBuild.fullDisplayName} has been successful!</h3>
                                     <p>The build has completed successfully. You can view the build details 
                                     by clicking <a href="${BUILD_URL}">here</a>.</p>''',
                            to: "${RECIPIENTS}",
                            mimeType: 'text/html'
                        )
                    }
                    // Send failure email if build failed
                    else if (currentBuild.result == 'FAILURE') {
                        emailext (
                            subject: "Build ${currentBuild.fullDisplayName} - FAILURE",
                            body: '''<h3>Build ${currentBuild.fullDisplayName} has failed!</h3>
                                     <p>Something went wrong during the build process. Please review the logs 
                                     to identify the issue. You can view the build details by clicking 
                                     <a href="${BUILD_URL}">here</a>.</p>''',
                            to: "${RECIPIENTS}",
                            mimeType: 'text/html'
                        )
                    }
                    // Send a notification for any case (always)
                    else {
                        emailext (
                            subject: "Build ${currentBuild.fullDisplayName} - Status Notification",
                            body: '''<h3>Build ${currentBuild.fullDisplayName} has finished!</h3>
                                     <p>Regardless of the build outcome, this is to notify you that the build 
                                     has completed. You can check the build details by clicking 
                                     <a href="${BUILD_URL}">here</a>.</p>''',
                            to: "${RECIPIENTS}",
                            mimeType: 'text/html'
                        )
                    }
                }

            }
        }
    }
}